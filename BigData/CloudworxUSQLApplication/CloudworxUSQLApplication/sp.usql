DROP PROCEDURE IF EXISTS Avro.dbo.sp_CreateLogs;

CREATE PROCEDURE Avro.dbo.sp_CreateLogs(@DateSliceStart DateTime, @DateSliceEnd DateTime)
AS
BEGIN

    REFERENCE ASSEMBLY [Newtonsoft.Json];
    REFERENCE ASSEMBLY [log4net];
    REFERENCE ASSEMBLY [Avro];
    REFERENCE ASSEMBLY [Microsoft.Analytics.Samples.Formats];


    //These external parameters will be populated by ADF based on the time slice being executed.
    DECLARE EXTERNAL @DateSliceStart DateTime = System.DateTime.Parse("2018/01/01");
    DECLARE EXTERNAL @DateSliceEnd DateTime = System.DateTime.Parse("2018/03/01");

    //These are intermediary variables which inherit the time element from the ADF time slice.
    DECLARE @YearNbr int = @DateSliceStart.Year;
    DECLARE @MonthNbr int = @DateSliceStart.Month;
    DECLARE @DayNbr int = @DateSliceStart.Day;

    //These are used to align the Year/Month/Day partitioning of the input & output.
    //This technique also allows U-SQL to dynamically generate different output file path & name.
    DECLARE @YearString string = @YearNbr.ToString();
    DECLARE @MonthString string = @MonthNbr.ToString().PadLeft(2, '0');
    DECLARE @DayString string = @DayNbr.ToString().PadLeft(2, '0');

    DECLARE @input_file = "archivefolder/cloudworxpoceventhubns_cloudworxpoceventhub_0/" + @YearString + "/" + @MonthString + "/{*}.avro";

    DECLARE @output_file string = "/output/" + @YearString + "/" + @MonthString + "/" + @YearString + @MonthString + ".csv";

   


    @rs =
        EXTRACT Body byte[]
        FROM @input_file

        USING new Microsoft.Analytics.Samples.Formats.ApacheAvro.AvroExtractor(@"
        {
            ""type"":""record"",
            ""name"":""EventData"",
            ""namespace"":""Microsoft.ServiceBus.Messaging"",
            ""fields"":[
                {""name"":""SequenceNumber"",""type"":""long""},
                {""name"":""Offset"",""type"":""string""},
                {""name"":""EnqueuedTimeUtc"",""type"":""string""},
                {""name"":""SystemProperties"",""type"":{""type"":""map"",""values"":[""long"",""double"",""string"",""bytes""]}},
                {""name"":""Properties"",""type"":{""type"":""map"",""values"":[""long"",""double"",""string"",""bytes""]}},
                {""name"":""Body"",""type"":[""null"",""bytes""]}
            ]
        }
    ");


    @jsonLogs =
        SELECT Microsoft.Analytics.Samples.Formats.Json.JsonFunctions.JsonTuple(Encoding.UTF8.GetString(Body), "..*") AS json
        FROM @rs;

    @logs =
        SELECT json["timestamp"]AS Timestamp,
               json["device"]AS Device,
               json["category"]AS Category,
               json["priority"]AS Priority,
               json["message"]AS Message
        FROM @jsonLogs;



    OUTPUT @logs
    TO @output_file
    USING Outputters.Text();

END;